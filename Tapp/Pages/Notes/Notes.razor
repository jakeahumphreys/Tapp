@page "/Notes/Notes"
@using Tapp.Notes.Data
@using Tapp.Notes.Types.Dto
<h3>Notes</h3>
<MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => CreateNote()" aria-label="New"></MudIconButton>
<MudDivider/>
<br/>
<MudContainer>
    <MudGrid>
       @foreach (var note in AllNotes)
       {
           <MudItem xs="6">
                <MudCard Outlined="true">
                      <MudCardHeader>
                          <CardHeaderContent>
                              <MudText Typo="Typo.h6">@note.Title</MudText>
                              <MudDivider/>
                              <MudText Typo="Typo.caption" Color="Color.Secondary" Style="font-style: italic">@note.Reference</MudText>
                          </CardHeaderContent>
                      </MudCardHeader>
                      <MudCardContent>
                          <MudText>@TruncateIfNeededAndDecorate(note.Content)</MudText>
                      </MudCardContent>
                      <MudCardActions>
                          <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default" />
                          <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                      </MudCardActions>
                </MudCard>
           </MudItem>
       }
    </MudGrid>
</MudContainer>



@code {
    [Inject] protected INoteService _noteService { get; set; }
    [Inject] protected NavigationManager _navigationManager { get; set; }
    
    public List<NoteDto> AllNotes { get; set; }

    protected override Task OnInitializedAsync()
    {
        AllNotes = _noteService.GetAll();
        StateHasChanged();

        return base.OnInitializedAsync();
    }

    public string TruncateIfNeededAndDecorate(string value)
    {
        var maxLength = 60;
        return value.Length > maxLength ? $"{value.Substring(0, maxLength)}..." : $"{value}...";
    }

    public void CreateNote()
    {
        _navigationManager.NavigateTo("/Notes/AddNote");
    }
}